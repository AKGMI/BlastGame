import { IGameController, IGameCoordinator } from "../../core/types";
import { BoosterType } from "../../features/boosters/BoostersTypes";
import { GameConfig } from "../config/GameConfig";
import { ToastManager } from "../../ui/managers/ToastManager";
import { GameServiceContainer } from "../../core/GameServiceContainer";
import GameController from "../../core/GameController";

export class DevConsole {
    private gameController: IGameController;
    private gameCoordinator: IGameCoordinator;
    private gameConfig: GameConfig;
    private serviceContainer: GameServiceContainer;

    constructor(gameController: IGameController, gameCoordinator: IGameCoordinator) {
        this.gameController = gameController;
        this.gameCoordinator = gameCoordinator;
        this.serviceContainer = GameServiceContainer.getGameInstance();
        this.gameConfig = this.serviceContainer.getGameConfig();
    }

    public setupCommands(): void {
        this.registerCommands();
        this.printAvailableCommands();
    }

    private registerCommands(): void {
        (window as any).restartGame = () => this.restartGame();

        (window as any).testBigField = () => this.testBigField();
        (window as any).testSmallField = () => this.testSmallField();

        (window as any).addBombs = (count: number) => this.addBombs(count);
        (window as any).addSwaps = (count: number) => this.addSwaps(count);

        (window as any).testWin = () => this.testWin();
        (window as any).testLose = () => this.testLose();
        (window as any).addScore = (points: number) => this.addScore(points);
        (window as any).setMoves = (count: number) => this.setMoves(count);
        (window as any).addMoves = (count: number) => this.addMoves(count);

        (window as any).showStats = () => this.showStats();

        (window as any).testToastSuccess = () => this.testToastSuccess();
        (window as any).testToastError = () => this.testToastError();
        (window as any).testToastInfo = () => this.testToastInfo();
        (window as any).testToastWarning = () => this.testToastWarning();
        (window as any).testToastQueue = () => this.testToastQueue();
        (window as any).clearToasts = () => this.clearToasts();

        (window as any).printBoard = (title?: string) => this.printBoard(title);
        (window as any).printBoardStats = () => this.printBoardStats();
    }

    private printAvailableCommands(): void {
        let message = 'üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n';

        message += 'üìè –†–∞–∑–º–µ—Ä –ø–æ–ª—è:\n';
        message += '  testSmallField() - –ø–æ–ª–µ 6x6\n';
        message += '  testBigField() - –ø–æ–ª–µ 10x10\n';
        message += 'üí£ –ë—É—Å—Ç–µ—Ä—ã:\n';
        message += '  addBombs(count) - –¥–æ–±–∞–≤–∏—Ç—å N –±–æ–º–±\n';
        message += '  addSwaps(count) - –¥–æ–±–∞–≤–∏—Ç—å N —Å–≤–∞–ø–æ–≤\n';
        message += 'üéØ –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n';
        message += '  testWin() - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞\n';
        message += '  testLose() - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ\n';
        message += '  addScore(points) - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏\n';
        message += '  setMoves(count) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ–¥—ã\n';
        message += '  addMoves(count) - –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ–¥—ã\n';
        message += 'üîÑ –£—Ç–∏–ª–∏—Ç—ã:\n';
        message += '  restartGame() - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n';
        message += '  showStats() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n';
        message += 'üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–∫–∏:\n';
        message += '  printBoard(title?) - –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –¥–æ—Å–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏\n';
        message += '  printBoardStats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏\n';
        message += 'üçû Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n';
        message += '  testToastSuccess() - —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n';
        message += '  testToastError() - —Ç–µ—Å—Ç –æ—à–∏–±–∫–∏\n';
        message += '  testToastInfo() - —Ç–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n';
        message += '  testToastWarning() - —Ç–µ—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n';
        message += '  testToastQueue() - —Ç–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ (5 toast\'–æ–≤)\n';
        message += '  clearToasts() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ toast\'—ã';

        console.log(message);
    }
    
    private testSmallField(): void {
        this.gameConfig.updateConfig(GameConfig.getTestConfig());
        this.gameCoordinator.restartGame();
    }

    private testBigField(): void {
        this.gameConfig.updateConfig({
            boardRows: 10,
            boardCols: 10,
            targetScore: 2000,
            totalMoves: 50,
            maxShuffles: 5
        });
        this.gameCoordinator.restartGame();
    }

    private addBombs(count: number): void {
        console.log(`[DevConsole] üí£ –î–æ–±–∞–≤–ª—è–µ–º ${count} –±–æ–º–±`);
        this.serviceContainer.getBoosterManager().addBoosters(BoosterType.BOMB, count);
        (this.gameController as GameController).updateUI();
    }

    private addSwaps(count: number): void {
        console.log(`[DevConsole] üîÑ –î–æ–±–∞–≤–ª—è–µ–º ${count} —Å–≤–∞–ø–æ–≤`);
        this.serviceContainer.getBoosterManager().addBoosters(BoosterType.SWAP, count);
        (this.gameController as GameController).updateUI();
    }

    private testWin(): void {
        console.log('[DevConsole] üèÜ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞!');
        const scoreManager = this.gameController.getGameModel().getScoreManager();
        const targetScore = scoreManager.getTargetScore();
        const currentScore = scoreManager.getScore();
        const pointsNeeded = targetScore - currentScore + 100;
        
        scoreManager.addScore(pointsNeeded);
        (this.gameController as GameController).updateUI();
        (this.gameController as GameController).checkAndHandleGameState();
    }

    private testLose(): void {
        console.log('[DevConsole] üíÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ!');
        const movesManager = this.gameController.getGameModel().getMovesManager();
        
        while (movesManager.getMovesLeft() > 0) {
            movesManager.useMove();
        }
        
        (this.gameController as GameController).updateUI();
        (this.gameController as GameController).checkAndHandleGameState();
    }

    private addScore(points: number): void {
        console.log(`[DevConsole] ‚≠ê –î–æ–±–∞–≤–ª—è–µ–º ${points} –æ—á–∫–æ–≤`);
        const scoreManager = this.gameController.getGameModel().getScoreManager();
        scoreManager.addScore(points);
        (this.gameController as GameController).updateUI();
    }

    private setMoves(count: number): void {
        console.log(`[DevConsole] üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${count} —Ö–æ–¥–æ–≤`);
        const movesManager = this.gameController.getGameModel().getMovesManager();
        const currentMoves = movesManager.getMovesLeft();

        movesManager.addMoves(count - currentMoves);
        
        (this.gameController as GameController).updateUI();
    }

    private addMoves(count: number): void {
        console.log(`[DevConsole] ‚ûï –î–æ–±–∞–≤–ª—è–µ–º ${count} —Ö–æ–¥–æ–≤`);
        const movesManager = this.gameController.getGameModel().getMovesManager();
        movesManager.addMoves(count);
        (this.gameController as GameController).updateUI();
    }

    private restartGame(): void {
        this.gameCoordinator.restartGame();
    }

    private showStats(): void {       
        const gameModel = this.gameController.getGameModel();
        const scoreManager = gameModel.getScoreManager();
        const movesManager = gameModel.getMovesManager();
        const gameBoard = gameModel.getGameBoard();
        const boosterManager = this.serviceContainer.getBoosterManager();

        let message = 'üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´ ===\n';
        
        message += `üéØ –°—á–µ—Ç: ${scoreManager.getScore()}/${scoreManager.getTargetScore()}\n`;
        message += `üéÆ –•–æ–¥—ã: ${movesManager.getMovesLeft()}/${movesManager.getTotalMoves()}\n`;
        message += `üé≤ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è: ${gameModel.getShufflesLeft()}/3\n`;
        message += `üìè –†–∞–∑–º–µ—Ä –ø–æ–ª—è: ${gameBoard.rows}x${gameBoard.cols}\n`;
        message += `üí£ –ë–æ–º–±—ã: ${boosterManager.getBoosterCount(BoosterType.BOMB)}\n`;
        message += `üîÑ –°–≤–∞–ø—ã: ${boosterManager.getBoosterCount(BoosterType.SWAP)}\n`;
        message += `üéÆ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${gameModel.getGameState() === 0 ? 'Playing' : gameModel.getGameState() === 1 ? 'WON' : 'LOST'}\n`;

        message += '===========================';

        console.log(message);
    }

    private testToastSuccess(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.showSuccess('üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞–±—Ä–∞–ª–∏ –º–Ω–æ–≥–æ –æ—á–∫–æ–≤!');
    }

    private testToastError(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.showError('‚ùå –û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ–¥–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è');
    }

    private testToastInfo(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.showInfo('‚ÑπÔ∏è –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä—Ç–∞–π–ª—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—á–∫–æ–≤');
    }

    private testToastWarning(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.showWarning('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Ö–æ–¥–æ–≤');
    }

    private testToastQueue(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.showSuccess('Toast 1: –£—Å–ø–µ—Ö!');
        toastManager.showError('Toast 2: –û—à–∏–±–∫–∞!');
        toastManager.showInfo('Toast 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!');
        toastManager.showWarning('Toast 4: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!');
        toastManager.showSuccess('Toast 5: –ï—â–µ –æ–¥–∏–Ω —É—Å–ø–µ—Ö!');
    }

    private clearToasts(): void {
        const toastManager = ToastManager.getInstance();
        toastManager.clear();
        console.log('üßπ –í—Å–µ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    }

    private printBoard(title?: string): void {
        console.log('[DevConsole] üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏');
        const gameBoard = this.gameController.getGameModel().getGameBoard();
        gameBoard.printBoard(title);
    }

    private printBoardStats(): void {
        console.log('[DevConsole] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏');
        const gameBoard = this.gameController.getGameModel().getGameBoard();
        gameBoard.printBoardStats();
    }

    public destroy(): void {
        delete (window as any).restartGame;
        delete (window as any).testBigField;
        delete (window as any).testSmallField;
        delete (window as any).addBombs;
        delete (window as any).addSwaps;
        delete (window as any).testWin;
        delete (window as any).testLose;
        delete (window as any).addScore;
        delete (window as any).setMoves;
        delete (window as any).addMoves;
        delete (window as any).showStats;
        delete (window as any).testToastSuccess;
        delete (window as any).testToastError;
        delete (window as any).testToastInfo;
        delete (window as any).testToastWarning;
        delete (window as any).testToastQueue;
        delete (window as any).clearToasts;
        delete (window as any).printBoard;
        delete (window as any).printBoardStats;
    }
} 